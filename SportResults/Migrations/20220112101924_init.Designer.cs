// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportResults.Models;

namespace SportResults.Migrations
{
    [DbContext(typeof(SportContext))]
    [Migration("20220112101924_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SportResults.Models.competition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("editdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long>("statusid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("statusid");

                    b.ToTable("competitions");
                });

            modelBuilder.Entity("SportResults.Models.discipline", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<long>("competitionid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("disciplinetypeid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("editdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("result")
                        .HasColumnType("double precision");

                    b.Property<long>("statusid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("competitionid");

                    b.HasIndex("disciplinetypeid");

                    b.HasIndex("statusid");

                    b.ToTable("discipline");
                });

            modelBuilder.Entity("SportResults.Models.disciplinetype", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("editdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<long>("statusid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("statusid");

                    b.ToTable("disciplinetype");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Бег на 100м",
                            statusid = 1L
                        },
                        new
                        {
                            id = 2L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Бег на 60м",
                            statusid = 1L
                        },
                        new
                        {
                            id = 3L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Прыжок в длину",
                            statusid = 1L
                        },
                        new
                        {
                            id = 4L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Тройной прыжок в длину",
                            statusid = 1L
                        });
                });

            modelBuilder.Entity("SportResults.Models.status", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("editdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("status");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Активно"
                        },
                        new
                        {
                            id = 2L,
                            createdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            editdate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Аннулировано"
                        });
                });

            modelBuilder.Entity("SportResults.Models.competition", b =>
                {
                    b.HasOne("SportResults.Models.status", null)
                        .WithMany("competitions")
                        .HasForeignKey("statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.discipline", b =>
                {
                    b.HasOne("SportResults.Models.competition", null)
                        .WithMany("disciplines")
                        .HasForeignKey("competitionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportResults.Models.disciplinetype", null)
                        .WithMany("disciplines")
                        .HasForeignKey("disciplinetypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportResults.Models.status", null)
                        .WithMany("disciplines")
                        .HasForeignKey("statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.disciplinetype", b =>
                {
                    b.HasOne("SportResults.Models.status", null)
                        .WithMany("disciplinetypes")
                        .HasForeignKey("statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.competition", b =>
                {
                    b.Navigation("disciplines");
                });

            modelBuilder.Entity("SportResults.Models.disciplinetype", b =>
                {
                    b.Navigation("disciplines");
                });

            modelBuilder.Entity("SportResults.Models.status", b =>
                {
                    b.Navigation("competitions");

                    b.Navigation("disciplines");

                    b.Navigation("disciplinetypes");
                });
#pragma warning restore 612, 618
        }
    }
}
