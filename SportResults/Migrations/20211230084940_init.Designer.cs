// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportResults.Models;

namespace SportResults.Migrations
{
    [DbContext(typeof(SportContext))]
    [Migration("20211230084940_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SportResults.Models.Competition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("SportResults.Models.Discipline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<long>("CompetitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DisciplineTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Result")
                        .HasColumnType("double precision");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DisciplineTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("SportResults.Models.DisciplineType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("DisciplineType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Бег на 100м",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Бег на 60м",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Прыжок в длину",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreateDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Тройной прыжок в длину",
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("SportResults.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2021, 12, 30, 11, 49, 40, 219, DateTimeKind.Local).AddTicks(3819),
                            EditDate = new DateTime(2021, 12, 30, 11, 49, 40, 220, DateTimeKind.Local).AddTicks(4983),
                            Name = "Активно"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTime(2021, 12, 30, 11, 49, 40, 220, DateTimeKind.Local).AddTicks(5977),
                            EditDate = new DateTime(2021, 12, 30, 11, 49, 40, 220, DateTimeKind.Local).AddTicks(5981),
                            Name = "Аннулировано"
                        });
                });

            modelBuilder.Entity("SportResults.Models.Competition", b =>
                {
                    b.HasOne("SportResults.Models.Status", null)
                        .WithMany("Competitions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.Discipline", b =>
                {
                    b.HasOne("SportResults.Models.Competition", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportResults.Models.DisciplineType", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("DisciplineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportResults.Models.Status", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.DisciplineType", b =>
                {
                    b.HasOne("SportResults.Models.Status", null)
                        .WithMany("DisciplineTypes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportResults.Models.Competition", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("SportResults.Models.DisciplineType", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("SportResults.Models.Status", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Disciplines");

                    b.Navigation("DisciplineTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
